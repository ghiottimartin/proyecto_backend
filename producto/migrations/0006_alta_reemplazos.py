# Generated by Django 3.2.4 on 2021-10-21 21:14

from django.db import migrations
import datetime
import random

def agregar_reemplazos(apps, schema_editor):
    pass
    # Producto = apps.get_model('producto', 'Producto')

    # producto1 = Producto.objects.get(nombre='Agua sin gas 0.5L')
    # producto2 = Producto.objects.get(nombre='Cerveza Santa Fe 473ml')
    # producto3 = Producto.objects.get(nombre='Hamburguesa completa')
    # producto4 = Producto.objects.get(nombre='Lomito con papas')
    # producto5 = Producto.objects.get(nombre='Pizza 4 Quesos')
    # producto6 = Producto.objects.get(nombre='Pizza Especial')

    # nuevo_reemplazo(apps, 'admin', [producto1, producto2])
    # nuevo_reemplazo(apps, 'admin', [producto2, producto3])
    # nuevo_reemplazo(apps, 'admin', [producto1, producto2, producto3])
    # nuevo_reemplazo(apps, 'admin', [producto3, producto4, producto5])

    # nuevo_reemplazo(apps, 'martin', [producto5, producto6])
    # nuevo_reemplazo(apps, 'martin', [producto2, producto4])
    # nuevo_reemplazo(apps, 'martin', [producto3, producto4, producto5])
    # nuevo_reemplazo(apps, 'martin', [producto1, producto2, producto3, producto4, producto5, producto6])

    # nuevo_reemplazo(apps, 'bernardo', [producto5, producto6])
    # nuevo_reemplazo(apps, 'bernardo', [producto2, producto4])
    # nuevo_reemplazo(apps, 'bernardo', [producto3, producto4, producto5])
    # nuevo_reemplazo(apps, 'bernardo', [producto1, producto2, producto3, producto4, producto5, producto6])

    # nuevo_reemplazo(apps, 'admin', [producto5, producto6])
    # nuevo_reemplazo(apps, 'admin', [producto2, producto4])
    # nuevo_reemplazo(apps, 'admin', [producto3, producto4, producto5])
    # nuevo_reemplazo(apps, 'admin', [producto1, producto2, producto3, producto4, producto5, producto6])

    # nuevo_reemplazo(apps, 'martin', [producto5, producto6])
    # nuevo_reemplazo(apps, 'martin', [producto2, producto4])
    # nuevo_reemplazo(apps, 'martin', [producto3, producto4, producto5])
    # nuevo_reemplazo(apps, 'martin', [producto1, producto2, producto3, producto4, producto5, producto6])
    # nuevo_reemplazo(apps, 'martin', [producto5, producto6])
    # nuevo_reemplazo(apps, 'martin', [producto2, producto4])
    # nuevo_reemplazo(apps, 'martin', [producto3, producto4, producto5])
    # nuevo_reemplazo(apps, 'martin', [producto1, producto2, producto3, producto4, producto5, producto6])


def nuevo_reemplazo(apps, nombre_usuario, productos):
    ReemplazoMercaderia = apps.get_model('producto', 'ReemplazoMercaderia')
    ReemplazoMercaderiaLinea = apps.get_model('producto', 'ReemplazoMercaderiaLinea')
    MovimientoStock = apps.get_model('producto', 'MovimientoStock')
    Usuario = apps.get_model('base', 'Usuario')

    usuario = Usuario.objects.get(username=nombre_usuario)
    dia_random = random.randint(1, 31)
    fecha_random = datetime.date(2021, 10, dia_random)
    reemplazo = ReemplazoMercaderia(usuario=usuario, fecha=fecha_random)
    reemplazo.save()

    for producto in productos:
        cantidad = random.randint(-10, 10)
        stock = producto.stock
        nuevo = stock - cantidad
        reemplazo_completo = True if nuevo <= 0 else False
        linea = ReemplazoMercaderiaLinea(reemplazo=reemplazo, producto=producto, stock_anterior=stock, stock_nuevo=nuevo, reemplazo_completo=reemplazo_completo)
        linea.save()

        id_texto = str(reemplazo.id).zfill(5)
        descripcion = "Reemplazo RM" + id_texto

        # Calculo la cantidad de stock generado por la ediciÃ³n.
        acumulado = 0
        movimientos = MovimientoStock.objects.filter(producto=producto)
        for movimiento in movimientos:
            acumulado += movimiento.cantidad
        diferencia = nuevo - acumulado
        movimiento = MovimientoStock(producto=producto, cantidad=diferencia, descripcion=descripcion,
                                     ingreso_linea=None, reemplazo_linea=linea,
                                     auditoria_creador=usuario, auditoria_modificado=usuario)
        movimiento.save()

        producto.stock = nuevo
        producto.save()
    reemplazo.save()


def borrar_reemplazos(apps, schema_editor):
    MovimientoStock = apps.get_model('producto', 'MovimientoStock')
    MovimientoStock.objects.filter(reemplazo_linea__isnull=False).delete()

    ReemplazoMercaderiaLinea = apps.get_model('producto', 'ReemplazoMercaderiaLinea')
    ReemplazoMercaderiaLinea.objects.all().delete()

    ReemplazoMercaderia = apps.get_model('producto', 'ReemplazoMercaderia')
    ReemplazoMercaderia.objects.all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ('producto', '0005_alta_ingresos'),
    ]

    operations = [
        migrations.RunPython(agregar_reemplazos, borrar_reemplazos),
    ]
